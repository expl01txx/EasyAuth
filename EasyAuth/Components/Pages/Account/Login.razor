@page "/login"

@using EasyAuth.Models.ViewModels;
@using EasyAuth.Data;
@using System.Security.Claims
@using Microsoft.AspNetCore.Authentication;
@using Microsoft.AspNetCore.Authentication.Cookies;
@inject ApplicationDbContext appDbContext;
@inject NavigationManager navigationManager;

<style>
    .custom-vertical-offset {
        margin-top: 10%; /* Adjust this value to move the form higher or lower */
    }
</style>

<div class="d-flex justify-content-center align-items-center custom-vertical-offset">
    <div class="col-lg-4 col-md-6 col-sm-8 col-12">
        <EditForm Model="@Model" OnValidSubmit="Authenticate" FormName="LoginForm" class="p-4 bg-white rounded shadow-sm">
            <DataAnnotationsValidator />
            
            <h3 class="text-center mb-4">EasyAuth - Login</h3>

            <div class="mb-3">
                <label for="username" class="form-label">Username</label>
                <InputText @bind-Value="Model.UserName" id="username" class="form-control" placeholder="Enter your username" />
                <ValidationMessage For="() => Model.UserName" class="text-danger small" />
            </div>

            <div class="mb-3">
                <label for="password" class="form-label">Password</label>
                <InputText @bind-Value="Model.Password" id="password" class="form-control" placeholder="Enter your password" type="password" />
                <ValidationMessage For="() => Model.Password" class="text-danger small" />
            </div>

            <div class="mb-3 text-danger small">
                <span>@errorMessage</span>
            </div>

            <button type="submit" class="btn btn-primary w-100">Login</button>
        </EditForm>
    </div>
</div>

@code {
	[CascadingParameter]
	public HttpContext? HttpContext { get; set; }

	[SupplyParameterFromForm]
	public LoginViewModel Model { get; set; } = new();

	private string? errorMessage;

	private async Task Authenticate(){
		var userAccount = appDbContext.UserAccounts.Where(x => x.UserName == Model.UserName).FirstOrDefault();
		if(userAccount is null || userAccount.Password != Model.Password){
			errorMessage = "Invalid User Name or Password";
			return;
		}

		var claims = new List<Claim>
		{
			new Claim(ClaimTypes.Name, Model.UserName),
			new Claim(ClaimTypes.Role, userAccount.Role)
		};

		var identity = new ClaimsIdentity(claims, CookieAuthenticationDefaults.AuthenticationScheme);
		var principal = new ClaimsPrincipal(identity);
		await HttpContext.SignInAsync(principal);
		navigationManager.NavigateTo("/");
	}
}
